{
	"name": "DetailLinesOutput",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "InputDataset",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "BankAccount",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "InputDatasetTemp",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Aggregate1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "Lookup1"
				},
				{
					"name": "Lookup2"
				}
			],
			"script": "source(output(\n\t\torderId as string,\n\t\tpayDate as string,\n\t\tclientuserId as string,\n\t\taccountId as string,\n\t\tstoreid as string,\n\t\toriginalBacsTransactionId as string,\n\t\torderStatus as string,\n\t\ttransactionId as string,\n\t\tparentTransactionId as string,\n\t\tcreatedDate as string,\n\t\ttransactionType as string,\n\t\tcurrency as string,\n\t\tamount as double,\n\t\ttransactionStatus as string,\n\t\ttype as string,\n\t\tlinked_transactionId as string,\n\t\tid as string,\n\t\tdate as string,\n\t\tstatus as string,\n\t\treasonCode as string,\n\t\tpaymentDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource(output(\n\t\tSTOREID as string,\n\t\tBANKACCOUNT as string,\n\t\tCURRENCY as string,\n\t\tTERRITORYID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source2\nLookup1 aggregate(groupBy(Date = '03/11/2020',\n\t\t{AccountNo.} = BANKACCOUNT,\n\t\tReference = 'Contact Lens Credits',\n\t\tDR_CR = 'C'),\n\tAmount = sum(amount)) ~> Aggregate1\nLookup2 derive(Currency = CURRENCY,\n\t\tTranscode = 'CLC',\n\t\tOffset_Account = '',\n\t\tBatchId = '',\n\t\tXrefType = '',\n\t\tXrefId = '',\n\t\tExtra = '') ~> DerivedColumn1\nsource1, source2 lookup(source1@storeid == source2@STOREID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nAggregate1, source2 lookup({AccountNo.} == BANKACCOUNT,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup2\nDerivedColumn1 sink(input(\n\t\tDate as string,\n\t\t{AccountNo.} as string,\n\t\tReference as string,\n\t\tDR_CR as string,\n\t\tAmount as string,\n\t\tCurrency as string,\n\t\tTranscode as string,\n\t\tOffset_Account as string,\n\t\tBatchId as string,\n\t\tXrefType as string,\n\t\tXrefId as string,\n\t\tExtra as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['DetailLine.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
		}
	}
}